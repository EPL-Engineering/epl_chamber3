%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Thu Jun 30 21:26:03 2016
%%Title: /home/fosse/Documents/work/chamber 3 construction/chamber 3 table ground.sch
%%Author: fosse
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
45550 48850 54550 48850 10 line
54550 48550 45550 48550 10 line
45550 47750 54550 47750 10 line
54550 47450 45550 47450 10 line
49050 47450 49050 47150 10 line
49050 47150 50350 47150 10 line
50350 47150 50350 47450 10 line
45450 48950 45450 47350 10 line
45750 48950 300 90 180 10 darc
45150 47350 300 270 360 10 darc
45250 48950 45250 47350 10 line
45550 48950 300 90 180 10 darc
44950 47350 300 270 360 10 darc
54850 48950 54850 47350 10 line
55150 48950 300 90 180 10 darc
54550 47350 300 270 360 10 darc
54650 48950 54650 47350 10 line
54950 48950 300 90 180 10 darc
54350 47350 300 270 360 10 darc
49850 47650 50050 47750 10 line
50050 47750 50050 47650 10 line
50050 47550 50050 47450 10 line
49850 47750 49850 47650 10 line
49850 47550 49850 47450 10 line
50050 47650 49850 47550 10 line
50050 47550 49850 47450 10 line
50050 47450 50050 47350 10 line
49850 47450 49850 47350 10 line
49850 47250 49850 47150 10 line
50050 47250 50050 47150 10 line
49950 47350 49950 47250 10 line
49350 47200 200 225 315 10 darc
49250 47350 49450 47450 10 line
49450 47450 49450 47350 10 line
49450 47250 49450 47150 10 line
49250 47450 49250 47350 10 line
49250 47250 49250 47150 10 line
49450 47350 49250 47250 10 line
49450 47250 49250 47150 10 line
49350 47050 49350 47000 10 line
gsave
false false false false 202.222224 [(For Chamber 3B the grounding block was installed. We would like to repurpose it to ground Sunil's vibration table. This is how I think it should be connected. ) (This is not to scale. For illistrative purposes on wiring technique only not routing. The grounding block shown rotated to make visualizing the connections on ) (it easier. This is nessisary because of the possiblity of the vibration table's grounding connection picking up stray fields from the adjacent electrical systems. ) (For example the transformers we mounted near by for Chamber 6.) ] 0 40725 49375 180.555557 text
grestore
49209 47100 49209 47058 10 line
49491 47100 49491 47058 10 line
49950 47100 49950 47050 10 line
49809 47150 49809 47108 10 line
50091 47150 50091 47108 10 line
49950 47250 200 225 315 10 darc
48850 47100 49550 47100 10 line
49550 47100 49550 47150 10 line
49550 47150 48850 47150 10 line
48850 47150 48850 47100 10 line
47900 47100 350 0 360 10 darc
47900 47100 250 0 360 10 darc
47900 47100 48850 47100 10 line
gsave
false false false false 202.222224 [(Grounding Block) ] 0 50700 46950 180.555557 text
grestore
gsave
false false false false 202.222224 [(Tapped Hole) ] 0 50400 49150 180.555557 text
grestore
gsave
false false false false 202.222224 [(Horizontal Building Steel) ] 0 52050 48100 180.555557 text
grestore
gsave
false false false false 202.222224 [(Conduit) ] 0 47350 45650 180.555557 text
grestore
gsave
false false false false 202.222224 [(Insulating Sleeve) ] 0 48450 45850 180.555557 text
grestore
gsave
false false false false 202.222224 [(Crimp) ] 0 49500 46300 180.555557 text
grestore
gsave
false false false false 202.222224 [(Screw/Bolt) ] 0 50000 46650 180.555557 text
grestore
50000 46650 49950 47050 10 line
50000 46650 49350 47000 10 line
50350 47150 50700 46950 10 line
49500 46300 49050 47100 10 line
gsave
false false false false 202.222224 [(Braid) ] 0 49250 46050 180.555557 text
grestore
48650 47100 49250 46050 10 line
48450 45850 47950 46850 10 line
47350 45650 46850 46750 10 line
47900 46750 46950 46750 10 line
46950 46050 700 90 180 10 darc
46950 46050 1400 90 180 10 darc
45550 44200 45550 46050 10 line
45900 43750 250 0 360 10 darc
45650 43800 45650 44150 10 line
46150 43750 46150 44150 10 line
46250 46050 46250 44150 10 line
45900 44150 250 0 180 10 darc
45900 44150 350 315 585 10 darc
gsave
false true false false 202.222224 [(Note: At this end the insulating sleeve extends past ) (the end of the conduit. This is important in isolating ) (noise on the surface of the sleeve from the braid. ) (This extension space should be 2" or 3".) ] 0 45250 43550 180.555557 text
grestore
45900 43700 45900 42900 10 line
45400 42250 45900 42250 10 line
45900 42250 45900 43300 10 line
45900 43300 45400 43300 10 line
45400 43300 45400 42250 10 line
gsave
true false true false 202.222224 [(Wood Block) ] 270 45650 42750 180.555557 text
grestore
gsave
false true false false 202.222224 [(Wall) ] 0 45200 42650 180.555557 text
grestore
gsave
false false false false 202.222224 [(Grounding Bar) ] 0 47050 43350 180.555557 text
grestore
45400 43650 45400 41850 10 line
45400 43650 45250 43500 10 line
45400 43500 45250 43350 10 line
45400 43350 45250 43200 10 line
45400 43200 45250 43050 10 line
45400 43050 45250 42900 10 line
45400 42900 45250 42750 10 line
45400 42750 45250 42600 10 line
45400 42600 45250 42450 10 line
45400 42450 45250 42300 10 line
45400 42300 45250 42150 10 line
45400 42150 45250 42000 10 line
45400 42000 45250 41850 10 line
45900 42400 46200 42400 10 line
46200 42400 46200 43150 10 line
46200 43150 45900 43150 10 line
45900 43150 45900 42400 10 line
47050 43350 46200 43150 10 line
46000 42500 45900 42700 10 line
45900 42700 46000 42700 10 line
46100 42700 46200 42700 10 line
45900 42500 46000 42500 10 line
46100 42500 46200 42500 10 line
46000 42700 46100 42500 10 line
46100 42700 46200 42500 10 line
46500 42250 600 180 270 10 darc
46450 41650 46550 41650 10 line
gsave
false false false false 202.222224 [(Braid \(Extends 5ft or 6ft to reach the vibration table\)) ] 0 46550 41650 180.555557 text
grestore
gsave
false false false false 202.222224 [(Braid) ] 0 47050 43700 180.555557 text
grestore
47050 43700 45900 43400 10 line
gsave
false false false false 202.222224 [(Insulating Sleave) ] 0 47050 44000 180.555557 text
grestore
47050 44000 46150 43750 10 line
gsave
false false false false 202.222224 [(The idea is to crimp the braid at least on the outside with the grounding ) (block so that the two are electrically connected. This is to avoid the few ) (milliohms of added resistance cutting and crimping the braid in two ) (sections of braid would add.) ] 0 42100 40550 180.555557 text
grestore
gsave
false false false false 202.222224 [(At the ceiling end of the conduit the conduit ) (should be grounded to the building steel. ) (This can be done via a clamp to a tapped ) (hole in the vertical building steel or a ) (connection to one of the unused tapped ) (holes in the grounding block.) ] 0 51850 45500 180.555557 text
grestore
gsave
false false false false 202.222224 [(The wood block is to protect the wall from marks the ) (braid might leave.) ] 0 40600 41800 180.555557 text
grestore
gsave
false false false false 202.222224 [(The connection must be made with braid because we don't want vibrations ) (from the wall being conducted onto the table.) ] 0 50100 43200 180.555557 text
grestore
gsave
false false false false 161.777776 [(Evan Foss) ] 0 53850 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(1) ] 0 51450 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(1) ] 0 49900 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(Chamber 3 Vibration Isolation Grounding) ] 0 49950 40700 144.444443 text
grestore
gsave
false false false false 161.777776 [(1) ] 0 53750 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(chamber 3 table ground.sch) ] 0 49900 40400 144.444443 text
grestore
showpage
%%End
